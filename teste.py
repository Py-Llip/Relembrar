"""Excelente, Fellipe! Bora ativar essa mente de programador com desafios que v√£o do **intermedi√°rio** ao **avan√ßado** em Python. S√£o exerc√≠cios que envolvem listas, dicion√°rios, fun√ß√µes, orienta√ß√£o a objetos, recurs√£o, decoradores, geradores, e at√© um pouco de multithreading.

---

### üîπ N√≠vel Intermedi√°rio

1. **Listas e Condi√ß√µes**

```python
# Filtrar todos os n√∫meros pares e positivos de uma lista e elevar ao quadrado.
numeros = [10, -3, 4, -7, 0, 8, 13, -2]
# Fa√ßa: lista_pares_quadrado = [...]
```

2. **Fun√ß√£o com Par√¢metro Vari√°vel**

```python
# Crie uma fun√ß√£o que aceita qualquer quantidade de n√∫meros e retorna a m√©dia deles.
# def media(*args): ...
```

3. **Dicion√°rios e Manipula√ß√£o**

```python
# A partir da lista de tuplas, crie um dicion√°rio onde a chave √© o nome e o valor √© a idade.
dados = [('Jo√£o', 23), ('Maria', 19), ('Ana', 21)]
```

4. **Fun√ß√£o Recursiva**

```python
# Implemente uma fun√ß√£o recursiva que calcule o fatorial de um n√∫mero.
# def fatorial(n): ...
```

5. **Fun√ß√µes com Fun√ß√µes**

```python
# Crie uma fun√ß√£o que recebe outra fun√ß√£o como par√¢metro e aplica ela aos elementos de uma lista.
# def aplicar_funcao(lista, func): ...
```

---

### üî∏ N√≠vel Avan√ßado

6. **Classes e Objetos**

```python
# Crie uma classe Produto com atributos nome, pre√ßo e m√©todo aplicar_desconto().
# instancie produtos e aplique descontos diferentes.
```

7. **Decoradores**

```python
# Crie um decorador que mede o tempo que uma fun√ß√£o leva para executar.
import time
# def cronometro(func): ...
```

8. **Geradores**

```python
# Crie um gerador que retorna infinitamente os n√∫meros da sequ√™ncia de Fibonacci.
# def fibonacci(): ...
```

9. **List Comprehension + Condicional Complexa**

```python
# Gere uma lista de strings com o formato "par-<n√∫mero>" para todos os n√∫meros pares entre 1 e 50.
# Resultado esperado: ['par-2', 'par-4', ..., 'par-50']
```

10. **Threading**

```python
# Crie duas fun√ß√µes que imprimem contagens diferentes. Execute-as simultaneamente usando threads.
import threading
# def contar1(): ...
# def contar2(): ...
```

---

### üåü Desafio Final: Sistema de Notas

Crie um pequeno sistema de alunos e notas:

* A classe `Aluno` deve armazenar nome e notas.
* Deve haver um m√©todo para calcular a m√©dia e outro para verificar aprova√ß√£o (nota ‚â• 7).
* Adicione tratamento de exce√ß√µes caso seja inserido um valor inv√°lido como nota.

---

Se quiser, posso corrigir suas respostas ou fazer os exerc√≠cios junto com voc√™. Posso tamb√©m gerar uma vers√£o PDF com todos eles bonitinhos. Vamos nessa?
"""